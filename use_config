#!/bin/bash
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

function backup {
    TARGET=$1
    BACKUP=${TARGET}.bak
    if [ -f ${TARGET} ]; then
        echo "Trying to backup ${TARGET}."
        if [ -f ${BACKUP} ]; then
            echo "${BACKUP} also already exists. Skipping."
            return 1
        else
            echo "Moving to ${BACKUP}."
            mv ${TARGET} ${BACKUP}
            return 0
        fi
    fi
    return 0
}

# Setup vim
SETUP_VIM=false
function setup_vim {
    if [ $SETUP_VIM == true ]; then
        if backup ${HOME}/.vimrc; then
            ln -s ${SCRIPT_DIR}/vim/vimrc ${HOME}/.vimrc
        fi
    fi
}

# Setup i3
SETUP_I3=false
I3_NEO=false
function setup_i3 {
  if [ $SETUP_I3 == true ]; then
    I3_CONFIG=${SCRIPT_DIR}/i3/i3-config
    if [ $I3_NEO == true ]; then
        I3_CONFIG=${I3_CONFIG}-neo
    fi
    backup ${HOME}/.config/i3/config
	mkdir -p ${HOME}/.config/i3
    # Assume, that if the config is a link, we set it up.
    # Delete it and create it anew to be able to switch configurations
    if [ -L ${HOME}/.config/i3/config ]; then
        rm ${HOME}/.config/i3/config
    fi
    ln -s ${I3_CONFIG} ${HOME}/.config/i3/config

    backup ${HOME}/.config/i3status/config
	mkdir -p ${HOME}/.config/i3status
    ${SCRIPT_DIR}/i3/configure-i3status.py ${SCRIPT_DIR}/i3/i3status-config-template ~/.config/i3status/config
    i3-msg --quiet restart
  fi
}

PYTHON=python
PIP="${PYTHON} -m pip"

function is_powerline_user_installed {
    user_packages="$(${PIP} freeze --user)"
    if [[ "${user_packages}" =~ "powerline-status" ]]; then
        return 0
    else
        return 1
    fi
}

# Setup powerline
SETUP_POWERLINE=false
function setup_powerline {
  if [ $SETUP_POWERLINE == true ]; then
      PYTHON_USER_SITE=`${PYTHON} -m site --user-site`

      if is_powerline_user_installed; then
          echo "Powerline is already installed"
          echo "Restarting"
          powerline-daemon -q --replace
      else
        ${PIP} install powerline-status powerline-gitstatus
        if [ $? -ne 0 ]; then
            echo "Failed to setup powerline"
            return 1
        fi
      fi

      POWERLINE_THEME=${PYTHON_USER_SITE}/powerline/config_files/themes/shell/default.json
      backup ${POWERLINE_THEME}
      cp ${SCRIPT_DIR}/powerline/theme.json ${POWERLINE_THEME}

      POWERLINE_COLORSCHEME=${PYTHON_USER_SITE}/powerline/config_files/colorschemes/shell/default.json
      backup ${POWERLINE_COLORSCHEME}
      cp ${SCRIPT_DIR}/powerline/colorscheme.json ${POWERLINE_COLORSCHEME}

      SETUP_POWERLINE_BASH=true
      # Check if powerline was already setup
      while read -r line
      do
          if (echo "$line" | grep --quiet "powerline-daemon"); then
              SETUP_POWERLINE_BASH=false
          fi
      done < "${HOME}/.bashrc"
      if [ $SETUP_POWERLINE_BASH == true ]; then
        echo "" >> ~/.bashrc
        echo "# Powerline setup" >> ~/.bashrc
        echo "powerline-daemon -q" >> ~/.bashrc
        echo "POWERLINE_BASH_CONTINUATION=1" >> ~/.bashrc
        echo "POWERLINE_BASH_SELECT=1" >> ~/.bashrc
        echo "source ${PYTHON_USER_SITE}/powerline/bindings/bash/powerline.sh" >> ~/.bashrc
      fi
  fi
}

# Setup git
SETUP_GIT=false
function setup_git {
    if [ $SETUP_GIT == true ]; then
        git config --global alias.tree "log --graph --pretty=format:'%C(auto)%h %d %s %C(blue)%aN %C(yellow)%G? %C(white)%cr%C(auto)'"
        echo ".vscode/" >> ${HOME}/.gitignore
    fi
}

function print_help {
    echo "$0 [config [config...]] [-h | --help]"
    echo ""
    echo "Creates symbolic links for the chosen programs from your home to the configuration files in this repository."
    echo ""
    echo "Config:"
    echo "  vim"
    echo "  i3"
    echo "  i3-neo"
    echo "  powerline"
    echo "    Sets up the powerline-status and powerline-gitstatus python2"
    echo "    packages which provide a pretty command line."
    echo "  git"
    echo "    Only adds my tree alias without modifying other git options."
    echo ""
    echo "Optional arguments:"
    echo "  -h --help  Show this help."
    echo ""
}

while (($#))
do
	case $1 in
		--help | -h)
			print_help ;
			exit ;
		;;
		vim)
            SETUP_VIM=true
		;;
        i3)
            SETUP_I3=true
        ;;
        i3-neo)
            SETUP_I3=true
            I3_NEO=true
        ;;
        powerline)
            SETUP_POWERLINE=true
        ;;
        git)
            SETUP_GIT=true
        ;;
		*)
			echo "Unknown parameter '$1'. Try --help for more information."
		exit 1
	esac
	shift
done

if [ ! $SETUP_VIM -a ! $SETUP_I3 ]; then
    echo "No program given. See --help for more information"
    exit 1
fi

setup_vim
setup_i3
setup_powerline
setup_git
